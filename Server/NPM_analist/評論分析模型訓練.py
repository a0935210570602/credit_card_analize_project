# -*- coding: utf-8 -*-
"""評論分析模型訓練.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vGx7q_egc9QGqh9E0bifKBO3wUAgmXGP
"""

from google.colab import drive
import pandas as pd

drive.mount('/content/gdrive')

google_comment_df  = pd.read_csv("/content/google_饗食天堂_台北京站店_comment.csv")
google_comment_df2 = pd.read_csv("/content/google_饗食天堂_台北信義店_comment.csv")
google_comment_df3 = pd.read_csv("/content/google_饗食天堂_台北大直店_comment.csv")
google_comment_df4 = pd.read_csv("/content/google_饗食天堂_新北板橋店_comment.csv")
google_comment_df5 = pd.read_csv("/content/google_饗食天堂_桃園中壢店_comment.csv")
google_comment_df6 = pd.read_csv("/content/google_饗食天堂_桃園新光店_comment.csv")

google_comment_df

def convertScore(score): 
     if score >= 4:
        return 'good'
     else:
        return 'bad'


def Convert(google):
     google['status'] = google['評等'].map(lambda e : convertScore(e))
     google = google[google['status'].isin(['good', 'bad'])]
     google['status'] = google['status'].replace({'good':1, 'bad': 0})
     google = google.drop(columns = ['評等','評論者'])
     return google


google_comment_df = Convert(google_comment_df)
google_comment_df2 = Convert(google_comment_df2)
google_comment_df3 = Convert(google_comment_df3)
google_comment_df4 = Convert(google_comment_df4)
google_comment_df5 = Convert(google_comment_df5)
google_comment_df6 = Convert(google_comment_df6)


#接著我們把所有dataframe整合成一個google dataframe

google_comment_df

google = pd.concat([google_comment_df,google_comment_df2,google_comment_df3,google_comment_df4,google_comment_df5,google_comment_df6],ignore_index=True)

bad_df = google[google['status'] ==0]
bad_df.shape

good_df = google[   google['status'] ==1]
good_df = good_df.sample(n=1025)

google

google['status'].value_counts().plot(kind='bar')

from sklearn.model_selection import train_test_split
train_df, test_df = train_test_split(google, test_size = 0.2, random_state = 927)
train_df = pd.DataFrame(train_df)

!pip install -U ipykernel
!pip install modin[dask]

pip install simpletransformers==0.48.15

from simpletransformers.classification import ClassificationModel
!pip install wandb
model = ClassificationModel('bert', 'hfl/chinese-bert-wwm')
model.train_model(train_df, self.args['/content/wan'])

result, model_output, wrong_predictions = model.eval_model(test_df)
result